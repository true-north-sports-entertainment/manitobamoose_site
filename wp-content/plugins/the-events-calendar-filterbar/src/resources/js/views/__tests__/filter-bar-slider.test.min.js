/**
 * This JS file was auto-generated via Terser.
 *
 * Contributors should avoid editing this file, but instead edit the associated
 * non minified file file. For more information, check out our engineering docs
 * on how we handle JS minification in our engineering docs.
 *
 * @see: https://evnt.is/dev-docs-minification
 */

describe("Filter Bar Slider",(()=>{beforeAll((()=>{String.prototype.className=function(){return"string"!=typeof this&&!this instanceof String||"function"!=typeof this.replace?this:this.replace(".","")},global.tribe={},require("../filter-bar-slider"),tribe.filterBar.filterToggle={}})),afterAll((()=>{delete String.prototype.className,delete global.tribe})),describe("Selectors",(()=>{test("Should match snapshot",(()=>{const selectors=JSON.stringify(tribe.filterBar.filterBarSlider.selectors);expect(selectors).toMatchSnapshot()}))})),describe("Handle slider overflow",(()=>{let $container,$filterBar,filtersSliderContainer,$filtersSliderNav;beforeEach((()=>{$container=$(),$container.find=()=>$filterBar,$filterBar=$(),filtersSliderContainer=document.createElement("div"),filtersSliderContainer.swiper={},$filtersSliderNav=$(),$filtersSliderNav.addClass=jest.fn((()=>$filtersSliderNav)),$filtersSliderNav.removeClass=jest.fn((()=>$filtersSliderNav))})),test("Should remove all overflow classes",(()=>{filtersSliderContainer.swiper.isBeginning=!0,filtersSliderContainer.swiper.isEnd=!0;const $filtersSliderContainer=$(filtersSliderContainer);$filtersSliderContainer.find=()=>$filtersSliderNav,$filterBar.find=()=>$filtersSliderContainer,tribe.filterBar.filterBarSlider.handleSliderOverflow($container),expect($filtersSliderNav.removeClass.mock.calls.length).toBe(2),expect($filtersSliderNav.addClass.mock.calls.length).toBe(0)})),test("Should add overflow start class",(()=>{filtersSliderContainer.swiper.isBeginning=!1,filtersSliderContainer.swiper.isEnd=!0;const $filtersSliderContainer=$(filtersSliderContainer);$filtersSliderContainer.find=()=>$filtersSliderNav,$filterBar.find=()=>$filtersSliderContainer,tribe.filterBar.filterBarSlider.handleSliderOverflow($container),expect($filtersSliderNav.removeClass.mock.calls.length).toBe(2),expect($filtersSliderNav.addClass.mock.calls.length).toBe(1),expect($filtersSliderNav.addClass.mock.calls[0][0]).toBe(tribe.filterBar.filterBarSlider.selectors.filtersSliderNavOverflowStart.className())})),test("Should add overflow end class",(()=>{filtersSliderContainer.swiper.isBeginning=!0,filtersSliderContainer.swiper.isEnd=!1;const $filtersSliderContainer=$(filtersSliderContainer);$filtersSliderContainer.find=()=>$filtersSliderNav,$filterBar.find=()=>$filtersSliderContainer,tribe.filterBar.filterBarSlider.handleSliderOverflow($container),expect($filtersSliderNav.removeClass.mock.calls.length).toBe(2),expect($filtersSliderNav.addClass.mock.calls.length).toBe(1),expect($filtersSliderNav.addClass.mock.calls[0][0]).toBe(tribe.filterBar.filterBarSlider.selectors.filtersSliderNavOverflowEnd.className())})),test("Should add both overflow start and end classes",(()=>{filtersSliderContainer.swiper.isBeginning=!1,filtersSliderContainer.swiper.isEnd=!1;const $filtersSliderContainer=$(filtersSliderContainer);$filtersSliderContainer.find=()=>$filtersSliderNav,$filterBar.find=()=>$filtersSliderContainer,tribe.filterBar.filterBarSlider.handleSliderOverflow($container),expect($filtersSliderNav.removeClass.mock.calls.length).toBe(2),expect($filtersSliderNav.addClass.mock.calls.length).toBe(2),expect($filtersSliderNav.addClass.mock.calls[0][0]).toBe(tribe.filterBar.filterBarSlider.selectors.filtersSliderNavOverflowStart.className()),expect($filtersSliderNav.addClass.mock.calls[1][0]).toBe(tribe.filterBar.filterBarSlider.selectors.filtersSliderNavOverflowEnd.className())}))})),describe("Handle slider translate",(()=>{test("Should update filters container styles",(()=>{tribe.filterBar.filterToggle.closeAllFilters=jest.fn();const $filtersContainer=$("<div></div>"),$filterBar=$();$filterBar.find=()=>$filtersContainer;const $container=$();$container.find=()=>$filterBar,expect($filtersContainer.css("transform")).toMatchSnapshot(),tribe.filterBar.filterBarSlider.handleSliderTranslate($container,80),expect($filtersContainer.css("transform")).toMatchSnapshot(),expect(tribe.filterBar.filterToggle.closeAllFilters.mock.calls.length).toBe(1)}))})),describe("Deinitialize slider",(()=>{test("Should deinitialize filter slider",(()=>{const filtersSliderContainer=document.createElement("div");filtersSliderContainer.swiper={destroy:jest.fn()};const $filtersSliderContainer=$(filtersSliderContainer),$filtersContainer=$("<div></div>"),$container=$();$container.find=selector=>{switch(selector){case tribe.filterBar.filterBarSlider.selectors.filtersSliderContainer:return $filtersSliderContainer;case tribe.filterBar.filterBarSlider.selectors.filtersContainer:return $filtersContainer;default:return $()}},tribe.filterBar.filterBarSlider.deinitSlider($container),expect(filtersSliderContainer.swiper.destroy.mock.calls.length).toBe(1),expect($filtersContainer.css("transform")).toMatchSnapshot()}))})),describe("Initialize slider",(()=>{beforeEach((()=>{global.Swiper=jest.fn()})),afterEach((()=>{delete global.Swiper})),test("Should initialize filter slider",(()=>{const $filtersSliderContainer=$("<div></div>"),$container=$();$container.find=()=>$filtersSliderContainer,tribe.filterBar.filterBarSlider.initSlider($container),expect(global.Swiper.mock.calls.length).toBe(1)})),test("Should update and return early",(()=>{const filtersSliderContainer=document.createElement("div");filtersSliderContainer.swiper={update:jest.fn()};const $filtersSliderContainer=$(filtersSliderContainer),$container=$();$container.find=()=>$filtersSliderContainer,tribe.filterBar.filterBarSlider.initSlider($container),expect(global.Swiper.mock.calls.length).toBe(0),expect(filtersSliderContainer.swiper.update.mock.calls.length).toBe(1)}))})),describe("Handle resize",(()=>{let deinitSliderHold,initSliderHold;beforeEach((()=>{deinitSliderHold=tribe.filterBar.filterBarSlider.deinitSlider,initSliderHold=tribe.filterBar.filterBarSlider.initSlider,tribe.filterBar.filterBarSlider.deinitSlider=jest.fn(),tribe.filterBar.filterBarSlider.initSlider=jest.fn()})),afterEach((()=>{tribe.filterBar.filterBarSlider.deinitSlider=deinitSliderHold,tribe.filterBar.filterBarSlider.initSlider=initSliderHold})),test("Should deinitialize slider on mobile",(()=>{const $container=$("<div></div>");$container.data("tribeEventsState",{isMobile:!0});const event={data:{container:$container}};tribe.filterBar.filterBarSlider.handleResize(event),expect(tribe.filterBar.filterBarSlider.deinitSlider.mock.calls.length).toBe(1),expect(tribe.filterBar.filterBarSlider.initSlider.mock.calls.length).toBe(0)})),test("Should initialize slider on desktop",(()=>{const $container=$("<div></div>");$container.data("tribeEventsState",{isMobile:!1});const event={data:{container:$container}};tribe.filterBar.filterBarSlider.handleResize(event),expect(tribe.filterBar.filterBarSlider.deinitSlider.mock.calls.length).toBe(0),expect(tribe.filterBar.filterBarSlider.initSlider.mock.calls.length).toBe(1)}))})),describe("Unbind events",(()=>{test("Should unbind events",(()=>{const $container=$();$container.off=jest.fn(),tribe.filterBar.filterBarSlider.unbindEvents($container),expect($container.off.mock.calls.length).toBe(1)}))})),describe("Bind events",(()=>{test("Should bind events",(()=>{const $container=$();$container.on=jest.fn(),tribe.filterBar.filterBarSlider.bindEvents($container),expect($container.on.mock.calls.length).toBe(1)}))})),describe("Deinitialize",(()=>{test("Should deinitialize filter bar slider",(()=>{const deinitSliderHold=tribe.filterBar.filterBarSlider.deinitSlider,unbindEventsHold=tribe.filterBar.filterBarSlider.unbindEvents;tribe.filterBar.filterBarSlider.deinitSlider=jest.fn(),tribe.filterBar.filterBarSlider.unbindEvents=jest.fn();const event={data:{container:$()}};tribe.filterBar.filterBarSlider.deinit(event,{},{}),expect(tribe.filterBar.filterBarSlider.deinitSlider.mock.calls.length).toBe(1),expect(tribe.filterBar.filterBarSlider.unbindEvents.mock.calls.length).toBe(1),tribe.filterBar.filterBarSlider.deinitSlider=deinitSliderHold,tribe.filterBar.filterBarSlider.unbindEvents=unbindEventsHold}))})),describe("Initialize",(()=>{let handleResizeHold,bindEventsHold;beforeEach((()=>{handleResizeHold=tribe.filterBar.filterBarSlider.handleResize,bindEventsHold=tribe.filterBar.filterBarSlider.bindEvents,tribe.filterBar.filterBarSlider.handleResize=jest.fn(),tribe.filterBar.filterBarSlider.bindEvents=jest.fn()})),afterEach((()=>{tribe.filterBar.filterBarSlider.handleResize=handleResizeHold,tribe.filterBar.filterBarSlider.bindEvents=bindEventsHold})),test("Should initialize filter bar slider",(()=>{const $container=$('<div class="'+tribe.filterBar.filterBarSlider.selectors.filterBarHorizontal.className()+'"></div>');tribe.filterBar.filterBarSlider.init({},0,$container,{}),expect(tribe.filterBar.filterBarSlider.handleResize.mock.calls.length).toBe(1),expect(tribe.filterBar.filterBarSlider.bindEvents.mock.calls.length).toBe(1)})),test("Should return early if filter bar is not horizontal",(()=>{const $container=$();tribe.filterBar.filterBarSlider.init({},0,$container,{}),expect(tribe.filterBar.filterBarSlider.handleResize.mock.calls.length).toBe(0),expect(tribe.filterBar.filterBarSlider.bindEvents.mock.calls.length).toBe(0)}))}))}));