/**
 * This JS file was auto-generated via Terser.
 *
 * Contributors should avoid editing this file, but instead edit the associated
 * non minified file file. For more information, check out our engineering docs
 * on how we handle JS minification in our engineering docs.
 *
 * @see: https://evnt.is/dev-docs-minification
 */

describe("Filter Button",(()=>{beforeAll((()=>{String.prototype.className=function(){return"string"!=typeof this&&!this instanceof String||"function"!=typeof this.replace?this:this.replace(".","")},global.tribe={filterBar:{filterBarState:{}}},require("../filter-button"),tribe.events={views:{accordion:{}}}})),afterAll((()=>{delete String.prototype.className,delete global.tribe})),beforeEach((()=>{tribe.filterBar.filterBarState.closeFilterBar=jest.fn(),tribe.filterBar.filterBarState.openFilterBar=jest.fn()})),describe("Selectors",(()=>{test("Should match snapshot",(()=>{const selectors=JSON.stringify(tribe.filterBar.filterButton.selectors);expect(selectors).toMatchSnapshot()}))})),describe("Handle resize",(()=>{let $filterBar,$container;beforeEach((()=>{$filterBar=$("<div></div>"),$container=$("<div></div>"),$container.find=()=>$filterBar})),test("Should open filter bar on resize from mobile to desktop if layout is vertical",(()=>{$filterBar.data("tribeEventsState",{filterButtonDesktopInitialized:!1}),$container.data("tribeEventsState",{isMobile:!1}),$container.is=()=>!0;const event={data:{container:$container}};expect($filterBar.data("tribeEventsState")).toMatchSnapshot(),tribe.filterBar.filterButton.handleResize(event),expect($filterBar.data("tribeEventsState")).toMatchSnapshot(),expect(tribe.filterBar.filterBarState.openFilterBar.mock.calls.length).toBe(1),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(0)})),test("Should not open filter bar on resize from mobile to desktop if layout is not vertical",(()=>{$filterBar.data("tribeEventsState",{filterButtonDesktopInitialized:!1}),$container.data("tribeEventsState",{isMobile:!1}),$container.is=()=>!0;const event={data:{container:$container}};expect($filterBar.data("tribeEventsState")).toMatchSnapshot(),tribe.filterBar.filterButton.handleResize(event),expect($filterBar.data("tribeEventsState")).toMatchSnapshot(),expect(tribe.filterBar.filterBarState.openFilterBar.mock.calls.length).toBe(1),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(0)})),test("Should close filter bar on resize from desktop to mobile",(()=>{$filterBar.data("tribeEventsState",{filterButtonDesktopInitialized:!0}),$container.data("tribeEventsState",{isMobile:!0});const event={data:{container:$container}};expect($filterBar.data("tribeEventsState")).toMatchSnapshot(),tribe.filterBar.filterButton.handleResize(event),expect($filterBar.data("tribeEventsState")).toMatchSnapshot(),expect(tribe.filterBar.filterBarState.openFilterBar.mock.calls.length).toBe(0),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(1)})),test("Should not close filter bar on resize from mobile to mobile",(()=>{$filterBar.data("tribeEventsState",{filterButtonDesktopInitialized:!1}),$container.data("tribeEventsState",{isMobile:!0});const event={data:{container:$container}};expect($filterBar.data("tribeEventsState")).toMatchSnapshot(),tribe.filterBar.filterButton.handleResize(event),expect($filterBar.data("tribeEventsState")).toMatchSnapshot(),expect(tribe.filterBar.filterBarState.openFilterBar.mock.calls.length).toBe(0),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(0)})),test("Should not open filter bar on resize from desktop to desktop",(()=>{$filterBar.data("tribeEventsState",{filterButtonDesktopInitialized:!0}),$container.data("tribeEventsState",{isMobile:!1});const event={data:{container:$container}};expect($filterBar.data("tribeEventsState")).toMatchSnapshot(),tribe.filterBar.filterButton.handleResize(event),expect($filterBar.data("tribeEventsState")).toMatchSnapshot(),expect(tribe.filterBar.filterBarState.openFilterBar.mock.calls.length).toBe(0),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(0)}))})),describe("Handle click",(()=>{let $container;beforeEach((()=>{$container=$("<div></div>")})),test("Should return early if not mobile",(()=>{$container.data("tribeEventsState",{isMobile:!1});const event={data:{container:$container}};tribe.filterBar.filterButton.handleClick(event),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(0)})),test("Should not close filter bar if click target parent is filter bar",(()=>{$container.data("tribeEventsState",{isMobile:!0});const event={target:$('\n\t\t\t\t<div\n\t\t\t\t\tclass="tribe-filter-bar tribe-filter-bar--horizontal"\n\t\t\t\t\tid="tribe-filter-bar--12345"\n\t\t\t\t\tdata-js="tribe-filter-bar"\n\t\t\t\t>\n\t\t\t\t\t<form\n\t\t\t\t\t\tclass="tribe-filter-bar__form"\n\t\t\t\t\t\tmethod="post"\n\t\t\t\t\t\taction=""\n\t\t\t\t\t\taria-labelledby="tribe-filter-bar__form-heading--12345"\n\t\t\t\t\t\taria-describedby="tribe-filter-bar__form-description--12345"\n\t\t\t\t\t>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t').find("form")[0],data:{container:$container}};tribe.filterBar.filterButton.handleClick(event),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(0)})),test("Should not close filter bar if click target parent is filter button",(()=>{$container.data("tribeEventsState",{isMobile:!0});const event={target:$('\n\t\t\t\t<button\n\t\t\t\t\tclass="tribe-events-c-events-bar__filter-button"\n\t\t\t\t\taria-controls="tribe-filter-bar--12345"\n\t\t\t\t\taria-expanded="false"\n\t\t\t\t\tdata-js="tribe-events-accordion-trigger tribe-events-filter-button"\n\t\t\t\t>\n\t\t\t\t</button>\n\t\t\t')[0],data:{container:$container}};tribe.filterBar.filterButton.handleClick(event),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(0)})),test("Should close filter bar if click target parent not filter bar or filter button",(()=>{$container.data("tribeEventsState",{isMobile:!0});const event={target:$container[0],data:{container:$container}};tribe.filterBar.filterButton.handleClick(event),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(1)}))})),describe("Handle action done click",(()=>{test("Should close filter bar",(()=>{const event={data:{container:$()}};tribe.filterBar.filterButton.handleActionDoneClick(event),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(1)}))})),describe("Handle filter button click",(()=>{let $container,$filterButtonText,$filterBar;beforeEach((()=>{tribe.filterBar.filterBarSlider={handleResize:jest.fn()},$container=$("<div></div>"),$filterButtonText=$("<span></span>"),$filterBar=$("<div></div>"),$container.find=()=>$filterBar,$filterButtonText.text=jest.fn(),$filterBar.toggleClass=jest.fn()})),afterEach((()=>{delete global.tribe.filterBar.filterBarSlider})),test("Should close filter bar on click",(()=>{const $filterButton=$("<button></button>");$container.data=()=>({isMobile:!1}),$filterButton.addClass(tribe.filterBar.filterButton.selectors.filterButtonActive.className()),$filterButton.find=()=>$filterButtonText,$filterButton.toggleClass=jest.fn();const event={data:{target:$filterButton,actionDone:$(),container:$container}};tribe.filterBar.filterButton.handleFilterButtonClick(event),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(1),expect(tribe.filterBar.filterBarState.openFilterBar.mock.calls.length).toBe(0),expect(tribe.filterBar.filterBarSlider.handleResize.mock.calls.length).toBe(1)})),test("Should open filter bar on click",(()=>{const $filterButton=$("<button></button>");$container.data=()=>({isMobile:!1}),$filterButton.find=()=>$filterButtonText,$filterButton.toggleClass=jest.fn();const event={data:{target:$filterButton,actionDone:$(),container:$container}};tribe.filterBar.filterButton.handleFilterButtonClick(event),expect(tribe.filterBar.filterBarState.closeFilterBar.mock.calls.length).toBe(0),expect(tribe.filterBar.filterBarState.openFilterBar.mock.calls.length).toBe(1),expect(tribe.filterBar.filterBarSlider.handleResize.mock.calls.length).toBe(1)}))})),describe("Initialize state",(()=>{test("Should initialize state if filter bar is vertical",(()=>{const $container=$("<div></div>"),$filterBar=$("<div></div>");$container.find=()=>$filterBar,$container.data("tribeEventsState",{isMobile:!0}),tribe.filterBar.filterButton.initState($container),expect($filterBar.data("tribeEventsState")).toMatchSnapshot()}))}))}));