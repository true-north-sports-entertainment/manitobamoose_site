/**
 * This JS file was auto-generated via Terser.
 *
 * Contributors should avoid editing this file, but instead edit the associated
 * non minified file file. For more information, check out our engineering docs
 * on how we handle JS minification in our engineering docs.
 *
 * @see: https://evnt.is/dev-docs-minification
 */

describe("Filter Checkboxes",(()=>{beforeAll((()=>{String.prototype.className=function(){return"string"!=typeof this&&!this instanceof String||"function"!=typeof this.replace?this:this.replace(".","")},global.tribe={},require("../filter-checkboxes"),global.tribe.filterBar.filters={}})),afterAll((()=>{delete String.prototype.className,delete global.tribe})),describe("Selectors",(()=>{test("Should match snapshot",(()=>{const selectors=JSON.stringify(tribe.filterBar.filterCheckboxes.selectors);expect(selectors).toMatchSnapshot()}))})),describe("Handle checkbox change",(()=>{let event;beforeEach((()=>{event={data:{container:$()},target:{name:"filter_name",value:"1"}},global.tribe.filterBar.filters={addKeyValueToQuery:jest.fn().mockImplementation((()=>({}))),removeKeyValueFromQuery:jest.fn().mockImplementation((()=>({}))),getCurrentUrl:jest.fn().mockImplementation((()=>({}))),getCurrentUrlAsObject:jest.fn().mockImplementation((()=>({}))),submitRequest:jest.fn()}})),test("Should add key value to query if checked",(()=>{event.target.checked=!0,tribe.filterBar.filterCheckboxes.handleCheckboxChange(event),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(1),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(1)})),test("Should remove key value from query if not unchecked",(()=>{event.target.checked=!1,tribe.filterBar.filterCheckboxes.handleCheckboxChange(event),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(1),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(1)}))}))}));