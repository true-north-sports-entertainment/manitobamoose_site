/**
 * This JS file was auto-generated via Terser.
 *
 * Contributors should avoid editing this file, but instead edit the associated
 * non minified file file. For more information, check out our engineering docs
 * on how we handle JS minification in our engineering docs.
 *
 * @see: https://evnt.is/dev-docs-minification
 */

describe("Filter Multiselects",(()=>{beforeAll((()=>{String.prototype.className=function(){return"string"!=typeof this&&!this instanceof String||"function"!=typeof this.replace?this:this.replace(".","")},global.tribe={},require("../filter-multiselects"),global.tribe.filterBar.filters={},global.tribe_dropdowns={}})),afterAll((()=>{delete String.prototype.className,delete global.tribe,delete global.tribe_dropdowns})),describe("Selectors",(()=>{test("Should match snapshot",(()=>{const selectors=JSON.stringify(tribe.filterBar.filterMultiselects.selectors);expect(selectors).toMatchSnapshot()}))})),describe("Handle multiselect change",(()=>{beforeEach((()=>{global.tribe.events={views:{manager:{currentAjaxRequest:null}}},global.tribe.filterBar.filters={addKeyValueToQuery:jest.fn().mockImplementation((()=>({}))),removeKeyValueFromQuery:jest.fn().mockImplementation((()=>({}))),getCurrentUrl:jest.fn().mockImplementation((()=>({}))),getCurrentUrlAsObject:jest.fn().mockImplementation((()=>({}))),submitRequest:jest.fn()}})),test("Should return early if name attribute is empty",(()=>{const event={data:{target:$('<div value="42"></div>'),container:$("<div></div>")}};tribe.filterBar.filterMultiselects.handleMultiselectChange(event),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(0)})),test("Should return early if an ajax request is already happening",(()=>{global.tribe.events={views:{manager:{currentAjaxRequest:{}}}};const event={data:{target:$('<div name="key" value="42"></div>'),container:$("<div></div>")}};tribe.filterBar.filterMultiselects.handleMultiselectChange(event),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(0),delete global.tribe.events.views.manager})),test("Should remove key value from query",(()=>{const event={data:{target:$('<div name="key"></div>'),container:$("<div></div>")}};tribe.filterBar.filterMultiselects.handleMultiselectChange(event),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(1),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(1)})),test("Should replace key value in query with selected option",(()=>{const event={data:{target:$('<div name="key" value="42"></div>'),container:$("<div></div>")}};tribe.filterBar.filterMultiselects.handleMultiselectChange(event),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(1),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(1),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(1)})),test("Should replace key value in query with selected options",(()=>{const event={data:{target:$('<div name="key" value="42,24"></div>'),container:$("<div></div>")}};tribe.filterBar.filterMultiselects.handleMultiselectChange(event),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(2),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(1),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(1)}))})),describe("Handle template selection",(()=>{test("Should return selected option wrapped in span element",(()=>{const $template=tribe.filterBar.filterMultiselects.handleTemplateSelection({text:"Hello world"});expect($template).toMatchSnapshot()}))})),describe("Initialize multiselect",(()=>{test("Should initialize multiselect",(()=>{global.tribe_dropdowns={dropdown:jest.fn()};const $multiselectInput=$("<input />"),$container=$("<div></div>");$multiselectInput.on=jest.fn().mockImplementation((()=>$multiselectInput));const addClass=jest.fn(),trigger=jest.fn();$multiselectInput.data=()=>({$container:{addClass:addClass},trigger:trigger}),tribe.filterBar.filterMultiselects.initMultiselect($multiselectInput,$container),expect(global.tribe_dropdowns.dropdown.mock.calls.length).toBe(1),expect($multiselectInput.on.mock.calls.length).toBe(1),expect(addClass.mock.calls.length).toBe(1),expect(trigger.mock.calls.length).toBe(1),expect($multiselectInput.on.mock.calls[0][0]).toBe("change")}))}))}));