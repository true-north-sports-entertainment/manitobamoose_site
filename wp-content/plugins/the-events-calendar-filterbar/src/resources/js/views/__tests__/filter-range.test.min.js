/**
 * This JS file was auto-generated via Terser.
 *
 * Contributors should avoid editing this file, but instead edit the associated
 * non minified file file. For more information, check out our engineering docs
 * on how we handle JS minification in our engineering docs.
 *
 * @see: https://evnt.is/dev-docs-minification
 */

describe("Filter Checkboxes",(()=>{beforeAll((()=>{String.prototype.className=function(){return"string"!=typeof this&&!this instanceof String||"function"!=typeof this.replace?this:this.replace(".","")},global.tribe={},require("../filter-range"),global.tribe.filterBar.filters={},global.tribe_events_filter_bar_js_config={events:{currency_symbol:"$",reverse_currency_position:!1},l10n:{cost_range_currency_symbol_after:"<%- cost_low %><%- currency_symbol %> - <%- cost_high %><%- currency_symbol %>",cost_range_currency_symbol_before:"<%- currency_symbol %><%- cost_low %> - <%- currency_symbol %><%- cost_high %>"}}})),afterAll((()=>{delete String.prototype.className,delete global.tribe})),describe("Selectors",(()=>{test("Should match snapshot",(()=>{const selectors=JSON.stringify(tribe.filterBar.filterRange.selectors);expect(selectors).toMatchSnapshot()}))})),describe("Handle range slide change",(()=>{let $rangeSlider,$rangeInput,windowHold;beforeEach((()=>{windowHold=global.window,delete global.window.location,global.window=Object.create(window),global.window.location={href:"https://test.tri.be/events/month/?range=0-50",origin:"https://test.tri.be",pathname:"/events/month/",search:"?range=0-50",hash:""},global.tribe.filterBar.filters={addKeyValueToQuery:jest.fn(),removeKeyValueFromQuery:jest.fn(),submitRequest:jest.fn(),getCurrentUrl:jest.fn(),getCurrentUrlAsObject:jest.fn()},$rangeSlider=$('<div data-min="0" data-max="100"></div>'),$rangeInput=$('<input name="range" />'),$rangeSlider.siblings=()=>$rangeInput})),afterEach((()=>{global.window=windowHold})),test("Should return early if no name attribute",(()=>{$rangeInput.removeAttr("name");const event={data:{target:$rangeSlider}};tribe.filterBar.filterRange.handleRangeSlideChange(event,{}),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(0)})),test("Should return early if data-min attribute is not a number",(()=>{$rangeSlider.data("min","string");const event={data:{target:$rangeSlider}};tribe.filterBar.filterRange.handleRangeSlideChange(event,{}),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(0)})),test("Should return early if data-max attribute is not a number",(()=>{$rangeSlider.data("max","string");const event={data:{target:$rangeSlider}};tribe.filterBar.filterRange.handleRangeSlideChange(event,{}),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(0)})),test("Should remove key and value from query",(()=>{global.tribe.filterBar.filters.removeKeyValueFromQuery=jest.fn().mockImplementation((()=>({href:"https://test.tri.be/events/month/",origin:"https://test.tri.be",pathname:"/events/month/",search:"",hash:""})));const event={data:{target:$rangeSlider}};tribe.filterBar.filterRange.handleRangeSlideChange(event,{values:[0,100]}),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(1),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(0),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(1)})),test("Should add key and value to query",(()=>{global.tribe.filterBar.filters.addKeyValueToQuery=jest.fn().mockImplementation((()=>({href:"https://test.tri.be/events/month/?range=0-75",origin:"https://test.tri.be",pathname:"/events/month/",search:"?range=0-75",hash:""})));const event={data:{target:$rangeSlider}};tribe.filterBar.filterRange.handleRangeSlideChange(event,{values:[0,75]}),expect(tribe.filterBar.filters.removeKeyValueFromQuery.mock.calls.length).toBe(1),expect(tribe.filterBar.filters.addKeyValueToQuery.mock.calls.length).toBe(1),expect(tribe.filterBar.filters.submitRequest.mock.calls.length).toBe(1)}))})),describe("Handle range slide",(()=>{let $rangeSlider,$rangeLabel,event,ui;beforeEach((()=>{$rangeSlider=$('<div data-min="0" data-max="100"></div>'),$rangeLabel=$("<label>$0 - $100</label>"),$rangeSlider.siblings=()=>$rangeLabel,event={data:{target:$rangeSlider}},ui={values:[10,75]}})),test("Should update range label with currency symbol before value",(()=>{tribe.filterBar.filterRange.handleRangeSlide(event,ui),expect($rangeLabel.text()).toMatchSnapshot()})),test("Should update range label with currency symbol before value",(()=>{global.tribe_events_filter_bar_js_config.events.reverse_currency_position=!0,tribe.filterBar.filterRange.handleRangeSlide(event,ui),expect($rangeLabel.text()).toMatchSnapshot(),global.tribe_events_filter_bar_js_config.events.reverse_currency_position=!1}))}))}));