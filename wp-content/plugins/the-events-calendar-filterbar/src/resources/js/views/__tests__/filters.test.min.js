/**
 * This JS file was auto-generated via Terser.
 *
 * Contributors should avoid editing this file, but instead edit the associated
 * non minified file file. For more information, check out our engineering docs
 * on how we handle JS minification in our engineering docs.
 *
 * @see: https://evnt.is/dev-docs-minification
 */

describe("Filters",(()=>{beforeAll((()=>{String.prototype.className=function(){return"string"!=typeof this&&!this instanceof String||"function"!=typeof this.replace?this:this.replace(".","")},global.tribe={},require("../filters")})),afterAll((()=>{delete String.prototype.className,delete global.tribe})),describe("Selectors",(()=>{test("Should match snapshot",(()=>{const selectors=JSON.stringify(tribe.filterBar.filters.selectors);expect(selectors).toMatchSnapshot()}))})),describe("Remove square brackets from end",(()=>{test("Should remove square brackets from string",(()=>{expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("hello[]")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("hello[0]")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("hello[][]")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("hello[0][1]")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("[]hello[0]")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("[0]hello[]")).toMatchSnapshot()})),test("Should return string",(()=>{expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("[]hello")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("[0]hello")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("[hello]")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("hello")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("hello[")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("hello]")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("[hello")).toMatchSnapshot(),expect(tribe.filterBar.filters.removeSquareBracketsFromEnd("]hello")).toMatchSnapshot()}))})),describe("Has square brackets at end",(()=>{test("Should return true",(()=>{expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("hello[]")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("hello[0]")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("hello[][]")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("hello[0][1]")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("[]hello[0]")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("[0]hello[]")).toMatchSnapshot()})),test("Should return false",(()=>{expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("[]hello")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("[0]hello")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("[hello]")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("hello")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("hello[")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("hello]")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("[hello")).toMatchSnapshot(),expect(tribe.filterBar.filters.hasSquareBracketsAtEnd("]hello")).toMatchSnapshot()}))})),describe("Remove value from base key query string pieces",(()=>{let queryStringPieces;beforeEach((()=>{queryStringPieces=["hello[0]=world","hello[1]=foo","hello[2]=bar"]})),test("Should return original query string pieces array",(()=>{const result=tribe.filterBar.filters.removeValueFromBaseKeyQueryStringPieces(queryStringPieces,"baz");expect(result).toMatchSnapshot()})),test("Should remove value from query string pieces array",(()=>{const result=tribe.filterBar.filters.removeValueFromBaseKeyQueryStringPieces(queryStringPieces,"bar");expect(result).toMatchSnapshot()})),test("Should reindex query keys in query string pieces array",(()=>{const result=tribe.filterBar.filters.removeValueFromBaseKeyQueryStringPieces(queryStringPieces,"foo");expect(result).toMatchSnapshot()}))})),describe("Remove key value from query string pieces",(()=>{test("Should not remove key value from query string pieces",(()=>{const result=tribe.filterBar.filters.removeKeyValueFromQueryStringPieces(["hello=world","foo=bar","modern=tribe"],"foo","baz");expect(result).toMatchSnapshot()})),test("Should remove key value from query string pieces",(()=>{const result=tribe.filterBar.filters.removeKeyValueFromQueryStringPieces(["hello=world","foo=bar","modern=tribe"],"foo","bar");expect(result).toMatchSnapshot()})),test("Should remove key value from query string pieces when value is true",(()=>{const result=tribe.filterBar.filters.removeKeyValueFromQueryStringPieces(["hello=world","foo=bar","modern=tribe"],"foo",!0);expect(result).toMatchSnapshot()})),test("Should remove array key value from query string pieces",(()=>{const result=tribe.filterBar.filters.removeKeyValueFromQueryStringPieces(["hello=world","foo[0]=bar","foo[1]=baz","modern=tribe"],"foo[]","bar");expect(result).toMatchSnapshot()})),test("Should remove all array keys and values from query string pieces",(()=>{const result=tribe.filterBar.filters.removeKeyValueFromQueryStringPieces(["hello=world","foo[0]=bar","foo[1]=baz","modern=tribe"],"foo[]",!0);expect(result).toMatchSnapshot()}))})),describe("Remove key value from query",(()=>{let location;beforeEach((()=>{location={href:"https://test.tri.be/events/month/?hello=world&foo=bar",origin:"https://test.tri.be",pathname:"/events/month/",search:"?hello=world&foo=bar",hash:""}})),test("Should remove key value pair from query",(()=>{const loc1=tribe.filterBar.filters.removeKeyValueFromQuery(location,"hello","world"),loc2=tribe.filterBar.filters.removeKeyValueFromQuery(location,"foo","bar");expect(loc1).toMatchSnapshot(),expect(loc2).toMatchSnapshot()})),test("Should remove key value pair from query and return blank query string",(()=>{location.href="https://test.tri.be/events/month/?hello=world",location.search="?hello=world";const loc=tribe.filterBar.filters.removeKeyValueFromQuery(location,"hello","world");expect(loc).toMatchSnapshot()})),test("Should remove all instances of key from query",(()=>{location.href="https://test.tri.be/events/month/?hello[0]=world&foo[0]=bar&hello[1]=goodbye&foo[1]=baz",location.search="?hello[0]=world&foo[0]=bar&hello[1]=goodbye&foo[1]=baz";const url1=tribe.filterBar.filters.removeKeyValueFromQuery(location,"hello[]",!0),url2=tribe.filterBar.filters.removeKeyValueFromQuery(location,"foo[]",!0);expect(url1).toMatchSnapshot(),expect(url2).toMatchSnapshot()})),test("Should not remove key value pair from query",(()=>{const loc1=tribe.filterBar.filters.removeKeyValueFromQuery(location,"goodbye","world"),loc2=tribe.filterBar.filters.removeKeyValueFromQuery(location,"foo","baz");expect(loc1).toMatchSnapshot(),expect(loc2).toMatchSnapshot()})),test("Should return current url if no query string",(()=>{location.href="https://test.tri.be/events/month/",location.search="";const loc1=tribe.filterBar.filters.removeKeyValueFromQuery(location,"hello","world"),loc2=tribe.filterBar.filters.removeKeyValueFromQuery(location,"foo","bar");expect(loc1).toMatchSnapshot(),expect(loc2).toMatchSnapshot()}))})),describe("Get query to add",(()=>{let queryStringPieces;beforeEach((()=>{queryStringPieces=["hello=world"]})),test("Should get query to add to existing query string",(()=>{const result=tribe.filterBar.filters.getQueryToAdd(queryStringPieces,"foo","bar");expect(result).toMatchSnapshot()})),test("Should get query to add to blank query",(()=>{queryStringPieces=[];const result=tribe.filterBar.filters.getQueryToAdd(queryStringPieces,"foo","bar");expect(result).toMatchSnapshot()})),test("Should return blank string if key value pair exists in query",(()=>{queryStringPieces.push("foo=bar");const result=tribe.filterBar.filters.getQueryToAdd(queryStringPieces,"foo","bar");expect(result).toMatchSnapshot()})),test("Should return blank string if array key value pair exists in query",(()=>{queryStringPieces.push("foo[0]=bar");const result=tribe.filterBar.filters.getQueryToAdd(queryStringPieces,"foo[]","bar");expect(result).toMatchSnapshot()})),test("Should return indexed array query to add if base key value pair exists in query",(()=>{queryStringPieces.push("foo[0]=bar");const result=tribe.filterBar.filters.getQueryToAdd(queryStringPieces,"foo[]","baz");expect(result).toMatchSnapshot()}))})),describe("Add key value from query",(()=>{let location;beforeEach((()=>{location={href:"https://test.tri.be/events/month/?hello=world&foo=bar",origin:"https://test.tri.be",pathname:"/events/month/",search:"?hello=world&foo=bar",hash:""}})),test("Should add key value pair to query",(()=>{location.href="https://test.tri.be/events/month/?hello=world",location.search="?hello=world";const loc=tribe.filterBar.filters.addKeyValueToQuery(location,"foo","bar");expect(loc).toMatchSnapshot()})),test("Should add key value pair to blank query",(()=>{location.href="https://test.tri.be/events/month/",location.search="";const loc=tribe.filterBar.filters.addKeyValueToQuery(location,"foo","bar");expect(loc).toMatchSnapshot()})),test("Should return current url if key value pair exists in query",(()=>{const loc=tribe.filterBar.filters.addKeyValueToQuery(location,"foo","bar");expect(loc).toMatchSnapshot()}))})),describe("Get filters state",(()=>{test("Should return false if container is not mobile and not vertical",(()=>{const $container=$("<div></div>");$container.is=()=>!1,$container.data("tribeEventsState",{isMobile:!1});const result=tribe.filterBar.filters.getFiltersState($container);expect(result).toBe(!1)})),test("Should return false if there are no filters",(()=>{const $container=$("<div></div>");$container.data("tribeEventsState",{isMobile:!0});const result=tribe.filterBar.filters.getFiltersState($container);expect(result).toBe(!1)})),test("Should calculate filter state of 0",(()=>{const $container=$('\n\t\t\t\t<div>\n\t\t\t\t\t<div class="tribe-filter-bar-c-filter"></div>\n\t\t\t\t\t<div class="tribe-filter-bar-c-filter"></div>\n\t\t\t\t\t<div class="tribe-filter-bar-c-filter"></div>\n\t\t\t\t\t<div class="tribe-filter-bar-c-filter"></div>\n\t\t\t\t</div>\n\t\t\t');$container.is=()=>!0,$container.data("tribeEventsState",{isMobile:!1});const result=tribe.filterBar.filters.getFiltersState($container);expect(result).toBe(0)})),test("Should calculate filter state of 5",(()=>{const $container=$('\n\t\t\t\t<div>\n\t\t\t\t\t<div class="tribe-filter-bar-c-filter tribe-filter-bar-c-filter--open"></div>\n\t\t\t\t\t<div class="tribe-filter-bar-c-filter"></div>\n\t\t\t\t\t<div class="tribe-filter-bar-c-filter tribe-filter-bar-c-filter--open"></div>\n\t\t\t\t\t<div class="tribe-filter-bar-c-filter"></div>\n\t\t\t\t</div>\n\t\t\t');$container.is=()=>!1,$container.data("tribeEventsState",{isMobile:!0});const result=tribe.filterBar.filters.getFiltersState($container);expect(result).toBe(5)}))})),describe("Set Tribe Filter Bar Request",(()=>{test("Should set tribe filter bar request flag",(()=>{const $container=$("<div></div>");tribe.filterBar.filters.setTribeFilterBarRequest($container),expect($container.data("tribeRequestData")).toMatchSnapshot()}))})),describe("Submit request",(()=>{test("Should submit request",(()=>{const windowHold=global.window;delete global.window.location,global.window=Object.create(window),global.window.location={href:"https://test.tri.be/events/month/?diff-url-on-purpose"},global.tribe.events={views:{manager:{request:jest.fn(),shouldManageUrl:jest.fn().mockImplementation((()=>!0)),getContainerData:jest.fn().mockImplementation((()=>({prevUrl:"",url:"https://test.tri.be/events/month/?hello=world"})))}}};const $container=$("<div></div>");$container.trigger=jest.fn(),$container.data=jest.fn();const setTribeFilterBarRequestHold=tribe.filterBar.filters.setTribeFilterBarRequest;tribe.filterBar.filters.setTribeFilterBarRequest=jest.fn(),tribe.filterBar.filters.submitRequest($container,"https://test.tri.be/events/month/"),expect($container.trigger.mock.calls.length).toBe(2),expect(tribe.events.views.manager.shouldManageUrl.mock.calls.length).toBe(1),expect(tribe.filterBar.filters.setTribeFilterBarRequest.mock.calls.length).toBe(1),expect(tribe.events.views.manager.request.mock.calls.length).toBe(1),expect(tribe.events.views.manager.request.mock.calls[0][0]).toMatchSnapshot(),global.window=windowHold,delete global.tribe.events,tribe.filterBar.filters.setTribeFilterBarRequest=setTribeFilterBarRequestHold}))})),describe("Add Filter Bar Data",(()=>{let $container,$filterBar,getFiltersStateHold;beforeEach((()=>{$container=$("<div></div>"),$filterBar=$("<div></div>"),$container.find=()=>$filterBar,getFiltersStateHold=tribe.filterBar.filters.getFiltersState,tribe.filterBar.filters.getFiltersState=jest.fn().mockImplementation((()=>!1))})),afterEach((()=>{tribe.filterBar.filters.getFiltersState=getFiltersStateHold})),test("Should set filter bar state to 0 if filter bar is not open, is mobile, and is not filter bar request",(()=>{$container.data("tribeEventsState",{isMobile:!0}),$container.data("tribeRequestData",{}),$filterBar.is=()=>!1;const event={data:{container:$container}};tribe.filterBar.filters.addFilterBarData(event),expect(tribe.filterBar.filters.getFiltersState.mock.calls.length).toBe(1),expect($container.data("tribeRequestData")).toMatchSnapshot()})),test("Should set filter bar state to 0 if filter bar is not open, is mobile, and is filter bar request",(()=>{$container.data("tribeEventsState",{isMobile:!0}),$container.data("tribeRequestData",{tribe_filter_bar_request:1}),$filterBar.is=()=>!1;const event={data:{container:$container}};tribe.filterBar.filters.addFilterBarData(event),expect(tribe.filterBar.filters.getFiltersState.mock.calls.length).toBe(1),expect($container.data("tribeRequestData")).toMatchSnapshot()})),test("Should set filter bar state to 0 if filter bar is not open, is not mobile, and is not filter bar request",(()=>{$container.data("tribeEventsState",{isMobile:!1}),$container.data("tribeRequestData",{}),$filterBar.is=()=>!1;const event={data:{container:$container}};tribe.filterBar.filters.addFilterBarData(event),expect(tribe.filterBar.filters.getFiltersState.mock.calls.length).toBe(1),expect($container.data("tribeRequestData")).toMatchSnapshot()})),test("Should set filter bar state to 0 if filter bar is not open, is not mobile, and is filter bar request",(()=>{$container.data("tribeEventsState",{isMobile:!1}),$container.data("tribeRequestData",{tribe_filter_bar_request:1}),$filterBar.is=()=>!1;const event={data:{container:$container}};tribe.filterBar.filters.addFilterBarData(event),expect(tribe.filterBar.filters.getFiltersState.mock.calls.length).toBe(1),expect($container.data("tribeRequestData")).toMatchSnapshot()})),test("Should set filter bar state to 0 if filter bar is open, is mobile, and is not filter bar request",(()=>{$container.data("tribeEventsState",{isMobile:!0}),$container.data("tribeRequestData",{}),$filterBar.is=()=>!0;const event={data:{container:$container}};tribe.filterBar.filters.addFilterBarData(event),expect(tribe.filterBar.filters.getFiltersState.mock.calls.length).toBe(1),expect($container.data("tribeRequestData")).toMatchSnapshot()})),test("Should set filter bar state to 1 if filter bar is open, is mobile, and is filter bar request",(()=>{$container.data("tribeEventsState",{isMobile:!0}),$container.data("tribeRequestData",{tribe_filter_bar_request:1}),$filterBar.is=()=>!0;const event={data:{container:$container}};tribe.filterBar.filters.addFilterBarData(event),expect(tribe.filterBar.filters.getFiltersState.mock.calls.length).toBe(1),expect($container.data("tribeRequestData")).toMatchSnapshot()})),test("Should set filter bar state to 1 if filter bar is open, is not mobile, and is not filter bar request",(()=>{$container.data("tribeEventsState",{isMobile:!1}),$container.data("tribeRequestData",{}),$filterBar.is=()=>!0;const event={data:{container:$container}};tribe.filterBar.filters.addFilterBarData(event),expect(tribe.filterBar.filters.getFiltersState.mock.calls.length).toBe(1),expect($container.data("tribeRequestData")).toMatchSnapshot()})),test("Should set filter bar state to 1 if filter bar is open, is not mobile, and is filter bar request",(()=>{$container.data("tribeEventsState",{isMobile:!1}),$container.data("tribeRequestData",{tribe_filter_bar_request:1}),$filterBar.is=()=>!0;const event={data:{container:$container}};tribe.filterBar.filters.addFilterBarData(event),expect(tribe.filterBar.filters.getFiltersState.mock.calls.length).toBe(1),expect($container.data("tribeRequestData")).toMatchSnapshot()}))}))}));